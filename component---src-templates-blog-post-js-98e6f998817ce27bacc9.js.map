{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","state","minutes","componentDidMount","dummyHtmlElement","document","createElement","innerHTML","this","props","data","markdownRemark","html","console","log","setState","textContent","split","length","render","post","siteTitle","site","siteMetadata","title","pageContext","previous","next","location","frontmatter","description","excerpt","style","scale","display","marginBottom","rhythm","marginTop","date","toFixed","dangerouslySetInnerHTML","__html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","React","Component","pageQuery"],"mappings":"6OAQMA,E,oJACJC,MAAQ,CACNC,QAAS,G,8CAGXC,kBAAA,WAEE,IAAMC,EAAmBC,SAASC,cAAc,QAChDF,EAAiBG,UAAYC,KAAKC,MAAMC,KAAKC,eAAeC,KAC5DC,QAAQC,IAAIN,KAAKC,OACjBD,KAAKO,SAAS,CACZb,QAASE,EAAiBY,YAAYC,MAAM,KAAKC,OAAS,O,EAI9DC,OAAA,WACE,IAAMC,EAAOZ,KAAKC,MAAMC,KAAKC,eACvBU,EAAYb,KAAKC,MAAMC,KAAKY,KAAKC,aAAaC,MAF7C,EAGoBhB,KAAKC,MAAMgB,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KAElB,OACE,kBAAC,IAAD,CAAQC,SAAUpB,KAAKC,MAAMmB,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CACEG,MAAOJ,EAAKS,YAAYL,MACxBM,YAAaV,EAAKS,YAAYC,aAAeV,EAAKW,UAEpD,4BAAKX,EAAKS,YAAYL,OACtB,uBACEQ,MAAK,iBACAC,aAAM,IADN,CAEHC,QAAQ,QACRC,aAAcC,YAAO,GACrBC,UAAWD,aAAQ,MAGpBhB,EAAKS,YAAYS,KARpB,MAQ6B9B,KAAKP,MAAMC,QAAQqC,QAAQ,GARxD,aAUA,yBAAKC,wBAAyB,CAAEC,OAAQrB,EAAKR,QAC7C,wBACEoB,MAAO,CACLG,aAAcC,YAAO,MAGzB,kBAAC,IAAD,MACA,wBACEJ,MAAO,CACLE,QAAQ,OACRQ,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGnB,GACC,kBAAC,OAAD,CAAMoB,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACKvB,EAASG,YAAYL,QAI9B,4BACGG,GACC,kBAAC,OAAD,CAAMmB,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKE,YAAYL,MADpB,U,GA9DiB0B,IAAMC,WAyEtBnD,YAER,IAAMoD,EAAS","file":"component---src-templates-blog-post-js-98e6f998817ce27bacc9.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nclass BlogPostTemplate extends React.Component {\n  state = {\n    minutes: 0,\n  }\n\n  componentDidMount() {\n    // To calculate read time (Approximation)\n    const dummyHtmlElement = document.createElement(\"span\")\n    dummyHtmlElement.innerHTML = this.props.data.markdownRemark.html\n    console.log(this.props)\n    this.setState({\n      minutes: dummyHtmlElement.textContent.split(\" \").length / 200,\n    })\n  }\n\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <h1>{post.frontmatter.title}</h1>\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: `block`,\n            marginBottom: rhythm(1),\n            marginTop: rhythm(-1),\n          }}\n        >\n          {post.frontmatter.date} • {this.state.minutes.toFixed(0)} min read\n        </p>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <Bio />\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}